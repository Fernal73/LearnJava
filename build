#! /usr/bin/env bash

#######################################################################
#@author: Linus Fernandes(linusfernandes @gmail.com)
# @file: build
## @created: Friday May 03, 2019 21: 20: 25 IST
# @copyright: Copyright(c) Linus Fernandes
## @description: 
######################################################################
usage() {
  echo "usage: build dir"
  echo "dir - Project directory, must exist"
  exit 1
}

isDX ()
{
  type dx &>/dev/null
  return $?
}

isJVM ()
{
  type jar &>/dev/null
  return $?
}

createDex()
{
  dexFile=$proj-$version.dex
  rm -rf $proj/$distDir || \
    { echo "Unable to delete folder $proj/$distDir"; }
    dx --dex --output=$dexFile $proj && \
      mkdir -p $proj/$distDir && \
      cp $dexFile $proj/$distDir && exit 0 || \
      { echo "Error creating dex output"; }
      dxRes=$?
    }

  createJar()
  {
    cd $proj || echo "cannot cd to $proj";
    jarFile="$proj-$version.jar"
    if [ ! -e $manifestFile ] 
    then
      echo "$manifestFile does not exist. Run ant manifest in $proj."
      exit 1
    fi
    jar cfm $jarFile $manifestFile \
      `find . -name "*.class" \
      ! -path "*.git*" -type f` || \
      { echo "Error creating jar output: $jarFile";exit 1; }
      jarRes=$? 
      [ -e $jarFile ] && cp $jarFile .. \
        && mkdir -p $distDir && mv $jarFile $distDir || \
        { echo "Error moving jar file to $proj/$distDir"; }
        cd ..
        exit 0
      }

    readVersion()
    {
      [ -e $versionFile ] && \
        { version=$(cat $versionFile) || \
          echo "Unable to read $versionFile";}
        }

      proj=$1
      ver="1.7"
      version="0.0.0"
      distDir="dist"
      manifestFile="manifest.mf"
      verFile=".ver"
      versionFile=".version"
      isDX
      dex=$?
      isJVM
      jvm=$?
      dxRes=0
      jarRes=0
      options=""
      if [ -z $proj ] || [ ! -d $proj ]
      then
        usage
      else
        echo $proj
        [ -e $proj/$verFile ] && \
          { ver=$(cat $proj/$verFile) || \
            echo "Unable to read $proj/$verFile";}
                    ecj -$ver -cp $proj $proj
                    success=$?
                    if [ $success -eq 0 ]
                    then
                      readVersion
                      if [ $dex -eq 0 ]
                      then
                        createDex
                      fi
                      if [ $jvm -eq 0 ]
                      then
                        createJar
                      fi
                      if [ $dex ] && [ $jvm ]
                      then
                        echo "Unable to create executable archive"
                        success=1
                      fi
                    fi
                  fi
                  exit `expr $success + $dxRes + $jarRes`
