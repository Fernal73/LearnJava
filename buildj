#! /usr/bin/env bash

#######################################################################
#@author: Linus Fernandes(linusfernandes @gmail.com)
# @file: buildj
## @created: Friday May 03, 2019 21: 20: 25 IST
# @copyright: Copyright(c) Linus Fernandes
## @description: 
######################################################################
usage() {
        echo "usage: buildj dir"
        echo "dir - Project directory, must exist"
        exit 1
}


isJVM ()
{
  type jar &>/dev/null
  return $?
}

createJar()
{
  cd $proj || echo "cannot cd to $proj";
  jarFile="$proj-$version.jar"
  if [ ! -e $manifestFile ] 
  then
    echo "$manifestFile does not exist. Run ant manifest in $proj."
    exit 1
  fi
  jar cfm $jarFile $manifestFile \
    `find . -name "*.class" \
    ! -path "*.git*" -type f` || \
    { echo "Error creating jar output: $jarFile";exit 1; }
  jarRes=$? 
  [ -e $jarFile ] && cp $jarFile .. \
    && mkdir -p $distDir && mv $jarFile $distDir || \
    { echo "Error moving jar file to $proj/$distDir"; }
  cd ..
  exit 0
}

readVersion()
{
  [ -e $versionFile ] && \
      { version=$(cat $versionFile) || \
      echo "Unable to read $versionFile";}
}

proj=$1
ver="1.7"
version="0.0.0"
distDir="dist"
manifestFile="manifest.mf"
verFile=".ver"
versionFile=".version"

isJVM
jvm=$?
jarRes=0
if [ -z $proj ] || [ ! -d $proj ]
  then
    usage
else
    echo $proj
    [ -e $proj/$verFile ] && \
      { ver=$(cat $proj/$verFile) || \
      echo "Unable to read $proj/$verFile";}
    javac -source $ver -target $ver \
    -cp $proj -Xlint:all \
    `find $proj -name "*.java" -type f`
    success=$?
    if [ $success -eq 0 ]
      then
        readVersion
      if [ $jvm -eq 0 ]
        then
        createJar
      else
        echo "Unable to create executable archive"
        success=1
      fi
    fi
fi
exit `expr $success + $jarRes`
