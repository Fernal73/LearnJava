#!/usr/bin/env bash
usage()
{
  echo "Usage: $0 dir"
  echo "dir - Project directory"
  exit 1
}

readExclusions()
{
  [ -e "$proj"/"$exclusionsFile" ] && \
      { readarray -t exclusions < <(cat "$proj"/"$exclusionsFile") || \
      echo "Unable to read $proj/$exclusionsFile";}
}

declare -r rulesFile=$(realpath "pmdrules.xml")
declare -r cacheFile="pmd.cache"
declare -r errFile="pmd.errors"
declare -r auxCpFile="compile.cp"
auxCp=""
declare -r setupcp="setupclasspath"
declare -r format="text"
declare -i threads=5
declare -i minpriority=5
declare -r classpathFile=$(realpath "pmd.cp")
pmdCp=$(cat "$classpathFile")
declare -r mainClass="net.sourceforge.pmd.PMD"
declare -r exclusionsFile=".exclusions"
declare -r fileslist="pmdfiles.txt"
declare -a exclusions
declare -i res=0
proj="$1"

if [ "$#" -ne 1 ] || ! [ -d "$proj" ]; 
then
  usage
fi

readExclusions
set -o noglob
cd "$proj"
if [ -e "$fileslist" ]
then
  rm ./"$fileslist"
fi
if [ -e "$setupcp" ]
then
  ./"$setupcp"
  auxCp=$(cat "$auxCpFile")
fi
find . -type f -regex ".*[.]\(java\|jsp\)$" ${exclusions[@]} | tr '\n' ',' > "$fileslist"
if [ -s "$fileslist" ]
then
  java -cp "$pmdCp":"$auxCp":. \
    "$mainClass" \
    -filelist "$fileslist" -R "$rulesFile" -f "$format" \
    -min "$minpriority" -norulesetcompatibility \
    -failOnViolation true -cache "$cacheFile" \
    -reportfile "$errFile" \
    -t "$threads" \
    || { exitCode="$?";echo "$0 exited with error code $exitCode"; exit "$exitCode";}
      res=$?
fi
set +o noglob
exit $res
